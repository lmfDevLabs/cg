# -*- coding: utf-8 -*-
"""colorRectangles.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ubbxw2RbiSEY3Nq2hO_QS7Pj6KO2HplS
"""

import sys
import numpy as np
from PIL import Image

# check the first three args exists
if len(sys.argv) <= 3:
  print("Minimal args usage: python colorRectangles.py filename.ppt width height p1 p2 p3")
  # args from user
  filename = sys.argv[1]
  args = sys.argv[2:]
  # main method
  def mainPixelsSqaures(args):

    # main props
    width = sys.argv[2]
    height = sys.argv[3]
    imagesPercentages = []

    # loop over agrs
    for i, arg in enumerate(args, start=4):
      # print to check
      print(f"Argument {i}: {arg}")
      imagesPercentages.append(arg)

    # image original size
    initialRows = width
    initalColumns = height
    # arr to hold images sizes in decimal
    imagesSizes = []
    # loop over imagesPercentages a convert the arr items to decimal
    for value in imagesPercentages :
      values = [(initialRows) * (value * 0.01),(initalColumns) * (value * 0.01)]
      # fill arr with arrs with the resulting image sizes
      imagesSizes.append(values)
    # print to check
    print(imagesSizes)
    # [[x1,y1],[x2,y2],[x3,y3]]

    # pixels colors SD Part
    # mean (center) of the distribution
    mean = 128

    # to get the SD of the colors
    def desired_std_deviation(percentageValues,index):
      for percentageValue in percentageValues
        if index == 0:
          defaultSd = 100
        else if index = 1
          defaultSd = 100
          result = (defaultSd) * (percentageValue * 0.01)
          return result
        else if index = 2
          defaultSd = 100
          result = (defaultSd) * (percentageValue * 0.01)
          return result

    # loop over images sizes to create it
    for imagesSize,i in enumerate(imagesSizes,start=0):
      # get rows and columns
      columns = imagesSize[0]
      rows = imagesSize[1]
      # run it
      random_array_of_pixels = np.random.normal(
          loc=mean,
          scale=desired_std_deviation(imagesPercentages,i),
          size=(rows, columns)
      )
      # print to check
      print(random_array_of_pixels)
      return random_array_of_pixels

  # run it and return image result
  random_array_of_pixels = def mainPixelsSqaures(args)

  # to save image part
  def save_ppm_image(img, filename):
    with open(filename, "wb") as f:
      f.write(b"P6\n")
      f.write(f"{img.width} {img.height}\n".encode())
      f.write(b"255\n")
      img.save(f, format="PPM")

  # run it and return image result
  save_ppm_image(random_array_of_pixels, filename)





"""array

"""